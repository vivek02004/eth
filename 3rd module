
pragma solidity ^0.8.0;

contract MyToken {
    string public name = "data";
    string public symbol = "EX";
    uint256 public totalSupply;
    mapping(address => uint256) public balances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed to, uint256 amount);
    event Burn(address indexed from, uint256 amount);

    constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
    }

    
function transfer(address _to, uint256 _amount) public returns (bool) {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }

    function mint(address _to, uint256 _amount) public {
        require(_amount > 0, "Amount must be greater than zero");
        totalSupply += _amount;
        balances[_to] += _amount;
        emit Mint(_to, _amount);
    }

    function burn(address _from, uint256 _amount) public {
        require(balances[_from] >= _amount, "Insufficient balance");
        totalSupply -= _amount;
        balances[_from] -= _amount;
        emit Burn(_from, _amount);
    }
} 
